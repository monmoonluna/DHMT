<!doctype html>

<html>
    <head>
        <title>WebGL Cube</title>
        <style>
            body {
                display: flex;
                flex-direction: row;
            }
    
            #controls {
                display: flex;
                flex-direction: column;
                margin-right: 20px;
            }
    
            #matrices {

                display: flex;
                flex-direction: column;
                gap: 20px;
            }
    
            .matrix {
                font-family: monospace;
            }
    
            canvas {
                margin-left: 20px;
            }
        </style>
        
    </head>
<body>
    <div id="controls">
        <label for="sliderZoom">Zoom:</label>
        <input type="range" id="sliderZoom" min="1" max="20" step="0.1" value="6">
        <br>
        <label for="sliderRotateX">Rotate X:</label>
        <input type="range" id="sliderRotateX" min="0" max="360" step="1" value="0">
        <br>
        <label for="sliderRotateY">Rotate Y:</label>
        <input type="range" id="sliderRotateY" min="0" max="360" step="1" value="0">
        <br>
        <label for="sliderRotateZ">Rotate Z:</label>
        <input type="range" id="sliderRotateZ" min="0" max="360" step="1" value="0">
        <br>
        <button id="projectionButton">Chiếu</button>
        <br>
        <label for="fov">FOV (degrees):</label>
<input type="number" id="fov" min="1" max="179" step="1" value="40">
<br>
        <label for="centerX">Center X:</label>
        <input type="number" id="centerX" step="1" value="0">
        <br>
        <label for="centerY">Center Y:</label>
        <input type="number" id="centerY" step="1" value="0">
        <br>
        <label for="centerZ">Center Z:</label>
        <input type="number" id="centerZ" step="1" value="0">
    </div>
    <div id="matrices">
        <div class="matrix" id="projMatrixDisplay"></div>
        <div class="matrix" id="viewMatrixDisplay"></div>
        <div class="matrix" id="modelMatrixDisplay"></div>
    </div>
    <canvas width="1513" height="1024" id="my_Canvas"></canvas>
    

<script>

/*============= Creating a canvas =================*/

var canvas = document.getElementById('my_Canvas');

gl = canvas.getContext('experimental-webgl');

/*============ Defining and storing the geometry =========*/


// Tính toán độ dài cạnh a (nhập từ bàn phím)
var a = parseFloat(prompt("Nhập độ dài cạnh của hình lập phương:"));

// Tạo vertex của hình lập phương
var vertices = [
    // Front face
    -a, -a,  a,
     a, -a,  a,
     a,  a,  a,
    -a,  a,  a,

    // Back face
    -a, -a, -a,
    -a,  a, -a,
     a,  a, -a,
     a, -a, -a,

    // Top face
    -a,  a, -a,
    -a,  a,  a,
     a,  a,  a,
     a,  a, -a,

    // Bottom face
    -a, -a, -a,
     a, -a, -a,
     a, -a,  a,
    -a, -a,  a,

    // Right face
     a, -a, -a,
     a,  a, -a,
     a,  a,  a,
     a, -a,  a,

    // Left face
    -a, -a, -a,
    -a, -a,  a,
    -a,  a,  a,
    -a,  a, -a
];

var colors = [

5,3,7, 5,3,7, 5,3,7, 5,3,7,

1,1,3, 1,1,3, 1,1,3, 1,1,3,

0,0,1, 0,0,1, 0,0,1, 0,0,1,

1,0,0, 1,0,0, 1,0,0, 1,0,0,

1,1,0, 1,1,0, 1,1,0, 1,1,0,

0,1,0, 0,1,0, 0,1,0, 0,1,0

];

var indices = [

0,1,2, 0,2,3, 4,5,6, 4,6,7,

8,9,10, 8,10,11, 12,13,14, 12,14,15,

16,17,18, 16,18,19, 20,21,22, 20,22,23

];

// Create and store data into vertex buffer

var vertex_buffer = gl.createBuffer ();

gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);

gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

// Create and store data into color buffer

var color_buffer = gl.createBuffer ();

gl.bindBuffer(gl.ARRAY_BUFFER, color_buffer);

gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);

// Create and store data into index buffer

var index_buffer = gl.createBuffer ();

gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, index_buffer);

gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);

/*=================== Shaders =========================*/

var vertCode = 'attribute vec3 position;'+

'uniform mat4 Pmatrix;'+

'uniform mat4 Vmatrix;'+

'uniform mat4 Mmatrix;'+

'attribute vec3 color;'+//the color of the point

'varying vec3 vColor;'+

'void main(void) { '+//pre-built function

'gl_Position = Pmatrix*Vmatrix*Mmatrix*vec4(position, 1.);'+

'vColor = color;'+

'}';

var fragCode = 'precision mediump float;'+

'varying vec3 vColor;'+

'void main(void) {'+

'gl_FragColor = vec4(vColor, 1.);'+

'}';

var vertShader = gl.createShader(gl.VERTEX_SHADER);

gl.shaderSource(vertShader, vertCode);

gl.compileShader(vertShader);

var fragShader = gl.createShader(gl.FRAGMENT_SHADER);

gl.shaderSource(fragShader, fragCode);

gl.compileShader(fragShader);

var shaderProgram = gl.createProgram();

gl.attachShader(shaderProgram, vertShader);

gl.attachShader(shaderProgram, fragShader);

gl.linkProgram(shaderProgram);

/* ====== Associating attributes to vertex shader =====*/

var Pmatrix = gl.getUniformLocation(shaderProgram, "Pmatrix");

var Vmatrix = gl.getUniformLocation(shaderProgram, "Vmatrix");

var Mmatrix = gl.getUniformLocation(shaderProgram, "Mmatrix");

gl.bindBuffer(gl.ARRAY_BUFFER, vertex_buffer);

var position = gl.getAttribLocation(shaderProgram, "position");

gl.vertexAttribPointer(position, 3, gl.FLOAT, false,0,0) ;

// Position

gl.enableVertexAttribArray(position);

gl.bindBuffer(gl.ARRAY_BUFFER, color_buffer);

var color = gl.getAttribLocation(shaderProgram, "color");

gl.vertexAttribPointer(color, 3, gl.FLOAT, false,0,0) ;

// Color

gl.enableVertexAttribArray(color);

gl.useProgram(shaderProgram);

/*==================== MATRIX =====================*/

function get_projection(angle, a, zMin, zMax) {
    var ang = Math.tan((angle * 0.5) * Math.PI / 180); // angle * 0.5
    return [
        0.5 / ang, 0, 0, 0,
        0, 0.5 * a / ang, 0, 0,
        0, 0, -(zMax + zMin) / (zMax - zMin), -1,
        0, 0, (-2 * zMax * zMin) / (zMax - zMin), 0
    ];
}

// Lấy góc FOV từ trường input
var fovInput = document.getElementById('fov');
var fov = parseFloat(fovInput.value);

// Sử dụng góc FOV để tính toán ma trận chiếu
var proj_matrix = get_projection(fov, canvas.width / canvas.height, 1, 100);

var mov_matrix = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1];

var view_matrix = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1];

// translating z

view_matrix[14] = view_matrix[14]-6;//zoom

/*==================== Rotation ====================*/
// Định nghĩa hàm để thực hiện phép chiếu song song
function performParallelProjection() {
    var centerX = parseFloat(centerXInput.value);
    var centerY = parseFloat(centerYInput.value);
    var centerZ = parseFloat(centerZInput.value);

    proj_matrix = parallelProjection(centerX, centerY, centerZ);

    // Update and display the projection matrix
    gl.uniformMatrix4fv(Pmatrix, false, proj_matrix);
    projMatrixDisplay.textContent = 'Projection Matrix:\n' + matrixToString(proj_matrix);

    drawScene();
}


// Lắng nghe sự kiện click trên button
var projectionButton = document.getElementById('projectionButton');
projectionButton.addEventListener('click', performParallelProjection);
function parallelProjection(centerX, centerY, centerZ) {
    var aspect = canvas.width / canvas.height;
    var left = -a * aspect + centerX;
    var right = a * aspect + centerX;
    var bottom = -a + centerY;
    var top = a + centerY;
    var near = 1;
    var far = 100;

    return ortho(left, right, bottom, top, near, far);
}

function ortho(left, right, bottom, top, near, far) {
    return [
        2 / (right - left), 0, 0, 0,
        0, 2 / (top - bottom), 0, 0,
        0, 0, -2 / (far - near), 0,
        -(right + left) / (right - left), -(top + bottom) / (top - bottom), -(far + near) / (far - near), 1
    ];
}

function rotateZ(m, angle) {

var c = Math.cos(angle);

var s = Math.sin(angle);

var mv0 = m[0], mv4 = m[4], mv8 = m[8];

m[0] = c*m[0]-s*m[1];

m[4] = c*m[4]-s*m[5];

m[8] = c*m[8]-s*m[9];

m[1]=c*m[1]+s*mv0;

m[5]=c*m[5]+s*mv4;

m[9]=c*m[9]+s*mv8;

}

function rotateX(m, angle) {

var c = Math.cos(angle);

var s = Math.sin(angle);

var mv1 = m[1], mv5 = m[5], mv9 = m[9];

m[1] = m[1]*c-m[2]*s;

m[5] = m[5]*c-m[6]*s;

m[9] = m[9]*c-m[10]*s;

m[2] = m[2]*c+mv1*s;

m[6] = m[6]*c+mv5*s;

m[10] = m[10]*c+mv9*s;

}

function rotateY(m, angle) {

var c = Math.cos(angle);

var s = Math.sin(angle);

var mv0 = m[0], mv4 = m[4], mv8 = m[8];

m[0] = c*m[0]+s*m[2];

m[4] = c*m[4]+s*m[6];

m[8] = c*m[8]+s*m[10];

m[2] = c*m[2]-s*mv0;

m[6] = c*m[6]-s*mv4;

m[10] = c*m[10]-s*mv8;

}

/*================= Drawing ===========================*/
var sliderZoom = document.getElementById('sliderZoom');
        var sliderRotateX = document.getElementById('sliderRotateX');
        var sliderRotateY = document.getElementById('sliderRotateY');
        var sliderRotateZ = document.getElementById('sliderRotateZ');

        var projMatrixDisplay = document.getElementById('projMatrixDisplay');
        var viewMatrixDisplay = document.getElementById('viewMatrixDisplay');
        var modelMatrixDisplay = document.getElementById('modelMatrixDisplay');
        var centerXInput = document.getElementById('centerX');
    var centerYInput = document.getElementById('centerY');
    var centerZInput = document.getElementById('centerZ');

    centerXInput.addEventListener('input', updateProjection);
    centerYInput.addEventListener('input', updateProjection);
    centerZInput.addEventListener('input', updateProjection);

    function updateProjection() {
        // Lấy thông tin tâm chiếu từ trường input
        var centerX = parseFloat(centerXInput.value);
        var centerY = parseFloat(centerYInput.value);
        var centerZ = parseFloat(centerZInput.value);

        // Tính toán lại ma trận chiếu song song với tâm chiếu mới
        proj_matrix = parallelProjection(centerX, centerY, centerZ);

        // Cập nhật ma trận chiếu trên canvas
        gl.uniformMatrix4fv(Pmatrix, false, proj_matrix);

        // Hiển thị ma trận chiếu trên trang HTML
        projMatrixDisplay.textContent = 'Projection Matrix:\n' + matrixToString(proj_matrix);

        // Vẽ lại scene với ma trận chiếu mới
        drawScene();
    }
        function updateViewMatrix() {
            view_matrix = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1];
            view_matrix[14] = -sliderZoom.value;
            //viewMatrixDisplay.textContent = 'View Matrix:\n' + view_matrix.join(', ');
            //viewMatrixDisplay.textContent = 'View Matrix:\n' + view_matrix.join(', ');
        }
        function matrixToString(matrix) {
            let rows = [];
            for (let i = 0; i < 4; i++) {
                let row = matrix.slice(i * 4, i * 4 + 4);
                rows.push(row.map(num => num.toFixed(2)).join(', '));
            }
            return rows.join('\n');
        }
var time_old = 0;
function animate(time) {
            var dt = time - time_old;
            fov = parseFloat(fovInput.value);
    // Sử dụng góc FOV để tính toán lại ma trận chiếu
    proj_matrix = get_projection(fov, canvas.width / canvas.height, 1, 100);
            var rotateXAngle = sliderRotateX.value * Math.PI / 180;
            var rotateYAngle = sliderRotateY.value * Math.PI / 180;
            var rotateZAngle = sliderRotateZ.value * Math.PI / 180;

            mov_matrix = [1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1];
            rotateX(mov_matrix, rotateXAngle);
            rotateY(mov_matrix, rotateYAngle);
            rotateZ(mov_matrix, rotateZAngle);

            updateViewMatrix();
            
            time_old = time;

            gl.enable(gl.DEPTH_TEST);
            gl.depthFunc(gl.LEQUAL);
            gl.clearColor(0.5, 0.5, 0.5, 0.9);
            gl.clearDepth(1.0);
            gl.enable(gl.CULL_FACE); // Enable culling
            gl.cullFace(gl.BACK); // Cull back faces
            gl.viewport(0.0, 0.0, canvas.width, canvas.height);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            gl.uniformMatrix4fv(Pmatrix, false, proj_matrix);
            gl.uniformMatrix4fv(Vmatrix, false, view_matrix);
            gl.uniformMatrix4fv(Mmatrix, false, mov_matrix);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, index_buffer);
            gl.drawElements(gl.TRIANGLES, indices.length, gl.UNSIGNED_SHORT, 0);

            //projMatrixDisplay.innerText = matrixToString(proj_matrix);
        viewMatrixDisplay.textContent = 'Zoom Matrix:' + '\n' + matrixToString(view_matrix);
        modelMatrixDisplay.textContent = 'Rotate Matrix:'+ '\n' + matrixToString(mov_matrix);
        
            window.requestAnimationFrame(animate);
        }

        animate(0);


</script>

</body>

</html>